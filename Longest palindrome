	private static CharSequence longestPalindrome(String toCheck) {

		int stringLength = toCheck.length();

		//corner cases
		if (stringLength < 2)
			return toCheck;
		if (stringLength == 2 & toCheck.charAt(0) == toCheck.charAt(1))
			return toCheck;

		//currently size 1
		int[] longest = new int[] { 0, 0 };

		//we want odd and even length palindromes with pivot at i
		//expand in both directions and check for palindromes
		for (int i = 0; i < stringLength; i++) {

			//odd length (other than 1)
			int pivot = i + 1;

			for (int startIndex = pivot - 1, endIndex = pivot + 1;
				 startIndex >= 0 & endIndex < stringLength;
				 startIndex--, endIndex++) {

				if (toCheck.charAt(startIndex) == toCheck.charAt(endIndex)) {

					int length = endIndex - startIndex;
					//longer or starts earlier
					if (length > longest[1] - longest[0]) {
						longest[0] = startIndex;
						longest[1] = endIndex;
					}
				} else
					break;
			}

			//even length
			pivot = i;
			for (int startIndex = pivot, endIndex = pivot + 1;
				 startIndex >= 0 & endIndex < stringLength;
				 startIndex--, endIndex++) {

				if (toCheck.charAt(startIndex) == toCheck.charAt(endIndex)) {

					int length = endIndex - startIndex;
					//longer or starts earlier
					if (length > longest[1] - longest[0]) {
						longest[0] = startIndex;
						longest[1] = endIndex;
					}
				} else
					break;
			}

		}

		return toCheck.subSequence(longest[0], longest[1] + 1);
	}
