https://www.geeksforgeeks.org/minimum-number-swaps-required-sort-array/

	private static int minSwaps(int[] original, int N) {

		int[] expected = Arrays.copyOf(original, original.length);
		Arrays.sort(expected);

		Map<Integer, Set<Integer>> expectedPositions = new HashMap<>();
		for (int i = 0; i < expected.length; i++) {
			expectedPositions.computeIfAbsent(expected[i], HashSet::new)
							 .add(i);
		}

		int swaps = 0;
		for (int i = 0; i < original.length; i++) {

			int toTest = original[i];
			Set<Integer> validPos = expectedPositions.get(toTest);

			while (!validPos.contains(i)) {

				int pos = validPos.iterator().next();
				//swap with where its supposed to be
				original[i] = original[pos];
				original[pos] = toTest;
				//reset the condition
				toTest = original[i];
				validPos = expectedPositions.get(toTest);
				swaps++;
			}
		}

		return swaps;
	}
