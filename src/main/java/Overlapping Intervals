https://www.geeksforgeeks.org/merging-intervals/

	private static List<int[]> mergeIntervals(List<int[]> intervals) {

		//sort on start and end
		intervals.sort(Comparator.<int[]>comparingInt(interval -> interval[0])
							   .thenComparingInt(interval -> interval[1]));

		//now we can start merging intervals
		Stack<int[]> merged = new Stack<>();

		for (int[] currentInterval : intervals) {

			if (merged.isEmpty())
				merged.push(currentInterval);
			else {

				//keep merging till possible
				int[] previous = merged.pop();
				int[][] mergedIntervals = merge2Intervals(previous, currentInterval);
				while (mergedIntervals.length == 1 && !merged.isEmpty()) {
					previous = merged.pop();
					currentInterval = mergedIntervals[0];
					mergedIntervals = merge2Intervals(previous, currentInterval);
				}
				for (int[] mergedInterval : mergedIntervals) {
					merged.push(mergedInterval);
				}
			}
		}

		return merged;
	}

	//by contract a < b, if merger not possible return, maintaining this contract
	private static int[][] merge2Intervals(int[] a, int[] b) {

		if (a[1] >= b[0]) {
			if (b[1] >= a[1])
				return new int[][] { new int[] { a[0], b[1] } };
			else
				return new int[][] { a };
		} else
			return new int[][] { a, b };
	}

	public static void main(String[] args) {

		Scanner scanner = new Scanner(System.in);

		int testCases = scanner.nextInt();

		for (int i = 0; i < testCases; i++) {

			int numberOfIntervals = scanner.nextInt();
			List<int[]> intervals = new ArrayList<>(numberOfIntervals);
			for (int i1 = 0; i1 < numberOfIntervals; i1++) {
				intervals.add(new int[] { scanner.nextInt(), scanner.nextInt() });
			}
			intervals = mergeIntervals(intervals);
			intervals.forEach(interval -> System.out.print(interval[0] + " " + interval[1] + " "));
			System.out.println();
		}
	}
