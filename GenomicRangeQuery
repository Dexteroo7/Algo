https://app.codility.com/programmers/lessons/5-prefix_sums/genomic_range_query/

public static int[] solution(String S, int[] P, int[] Q) {

		int[] toReturn = new int[P.length];

		//map of respective counts upto index i
		int[][] countMap = new int[S.length()][4];
		int[] previousCount = new int[4];
		for (int index = 0; index < S.length(); index++) {

			int[] currentCounts = countMap[index] = new int[4];
			char currentChar = S.charAt(index);
			int mappedIndex;
			if (currentChar == 'A')
				mappedIndex = 0;
			else if (currentChar == 'C')
				mappedIndex = 1;
			else if (currentChar == 'G')
				mappedIndex = 2;
			else
				mappedIndex = 3;

			//add all previousCounts
			for (int i = 0; i < currentCounts.length; i++) {
				currentCounts[i] = previousCount[i];
			}

			//increment for current character
			currentCounts[mappedIndex] += 1;
			previousCount = currentCounts;
		}

		int[] emptyCounts = new int[4];
		for (int index = 0; index < P.length; index++) {

			int start = P[index];
			int end = Q[index];

			int[] uptoEnd = countMap[end];
			int[] uptoStartExclusive = start == 0 ? emptyCounts : countMap[start - 1];

			if (uptoEnd[0] > uptoStartExclusive[0])
				toReturn[index] = 1;
			else if (uptoEnd[1] > uptoStartExclusive[1])
				toReturn[index] = 2;
			else if (uptoEnd[2] > uptoStartExclusive[2])
				toReturn[index] = 3;
			else
				toReturn[index] = 4;
		}

		return toReturn;
	}
